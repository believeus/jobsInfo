<?xml version="1.0" encoding="UTF-8"?>
<project default="help" xmlns:artifact="urn:maven-artifact-ant">
	<property environment="env" />
	<property name="project" value="ROOT"/>
	<property name="myeclipeProjectName" value="wwmall" />
	<property name="webProjectDeployDir" value="${env.CATALINA_HOME}/webapps/${project}" />
	<property name="src" value="src/main/java" />
	<property name="resource" value="src/main/resources" />
	<property name="webRoot" value="src/main/webapp" />
	<property name="projectDependencyJar" value="${webRoot}/WEB-INF/lib/" />
	<property name="buildClassPath" value="${webRoot}/WEB-INF/classes" />
	<!--Begin Name:wuhuanrong Date:2013-09-17 AddReason:使用maven-ant-tasks定义仓库位置和依赖-->
	<path id="maven-ant-tasks.classpath" path="${env.M2_HOME}/maven-ant-tasks-2.1.3.jar" />
	<typedef resource="org/apache/maven/artifact/ant/antlib.xml" uri="urn:maven-artifact-ant" classpathref="maven-ant-tasks.classpath" />
	<artifact:pom id="project.pom.xml" file="pom.xml" />
	<artifact:dependencies pathId="maven.repo.classpath" filesetid="maven.dependency.lib">
		<pom refid="project.pom.xml" />
	</artifact:dependencies>
	<!--End  Name:wuhuanrong Date:2013-09-17 AddReason:使用maven-ant-tasks定义仓库位置和依赖-->

	<target name="help">
		<echo message="------------------使用ant部署-----------------------------------------" />
		<echo message="ant undeploy       将war从tomcat卸载" />
		<echo message="ant jrebelCompile   使用jrebel第三方插件进行热部署，依赖classCompile编译，jrebel会自动加载部署，无需进行mvn cargo:deploy的操作" />
		<echo message="ant fastDeploy  无须重启tomcat,生成war包快速部署到tomcat中"/>
		<echo message="------------------使用maven部署-----------------------------------------" />
		<echo message="mvn help:describe -Dplugin=pluginName 查看插件如何使用 例如mvn help:describe -Dplugin=cargo" />
		<echo message="mvn clean          删除target目录" />
		<echo message="mvn compile        将src下面的java文件编译为class文件,并将编译之后的.class和/3dgogou/src/main/resources的文件放置到src/main/webapp/WEB-INF/classes下" />
		<echo message="mvn war:war        会将pom.xml依赖的jar包和WEB-INF/lib下的jar打包成war包" />
		<echo message="mvn cargo:redeploy   部署web应用到tomcat中" />
		<echo message="mvn cargo:undeploy   卸载tomcat中的web应用" />
		<echo message="mvn cobertura:cobertura 生成测试覆盖率报表"/>
	</target>
	<!--Begin: Name:wuhuanrong Date:2013-09-07 AddReason:编译-->
	<target name="fastDeploy">
		<!--将maven项目中依赖的jar包copy到指定目录-->
		<mkdir dir="${buildClassPath}" />
		<!--Begin:第一步:只编译.java的文件-->
		<javac destdir="${buildClassPath}" srcdir="${src}" includeantruntime="true">
			<classpath>
				<!--编译所需要的jar包所在的路径-->
				<fileset dir="${projectDependencyJar}" includes="*.jar" />
				<!-- 项目在编译之后不会存在javaEE的jar包，使用这个tomcat/lib 下的只是负责编译通过而已而在部署到tomcat之后，tomcat存在这些包，所以项目能运行-->
				<fileset dir="${env.CATALINA_HOME}/lib" includes="*.jar" />
				<!-- 对单个jar包有效<classpath  path="xxx.jar"/>-->
			</classpath>
			<!--Begin Name:wuhuanrong Date:2013-09-17 AddReason:引用maven仓库中的jar进行编译-->
			<classpath refid="maven.repo.classpath" />
			<!--End Name:wuhuanrong Date:2013-09-17 AddReason:引用maven仓库中的jar进行编译-->
		</javac>
		<!--End:第一步:只编译.java的文件-->
		<!--Begin:第二步：将src中的文件(除了java文件)复制到对应${buildClassPath}文件夹中-->
		<echo message="copy ${resource} to ${buildClassPath}" />
		<copy todir="${buildClassPath}">
			<fileset file="${resource}/*" />
			<!--移动到对应的文件夹之中去-->
			<mapper type="identity" />
		</copy>
		<!--End:第二步：将src中的文件(除了java文件)复制到对应ant-build/classes文件夹中-->
		
		<!--Begin Author:wuiqwei Date:2014-04-04 AddReason:为了在线上调试之用,编译源码tomcat即可热部署-->
		<copy todir="${webProjectDeployDir}">
			<fileset dir="${webRoot}" />
			<!--移动到对应的文件夹之中去-->
			<mapper type="identity" />
		</copy>
		<!--End Author:wuiqwei Date:2014-04-04 AddReason:为了在线上调试之用,编译源码tomcat即可热部署-->
	</target>

	<!--Begin:定义ant任务 用来卸载应用-->
	<taskdef name="undeploy" classname="org.apache.catalina.ant.UndeployTask">
		<classpath>
			<pathelement location="${env.CATALINA_HOME}/lib/catalina-ant.jar" />
		</classpath>
	</taskdef>
	<target name="undeploy" description="uninstall web application">
		<undeploy url="http://localhost:8080/manager" username="manager" password="manager" path="/" />
	</target>
	<!--End:定义ant任务 用来卸载应用-->


</project>
