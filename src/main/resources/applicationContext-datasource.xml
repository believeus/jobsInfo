<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation=" http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

	<!-- aop 需要的命名空间 xmlns:aop="http://www.springframework.org/schema/aop" -->
	<!-- 该命名空间指向 xsi:schemaLocation=http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-2.5.xsd -->

	<!-- begin Spring 通过数据库连接池整合hibernate -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<property name="driverClass" value="com.mysql.jdbc.Driver" />
		<property name="jdbcUrl" value="jdbc:mysql://192.168.1.10:3306/jobs?useUnicode=true&amp;characterEncoding=UTF-8" />
		<property name="user" value="root" />
		<property name="password" value="root" />
		<property name="initialPoolSize" value="10" />
		<property name="minPoolSize" value="5" />
		<property name="maxPoolSize" value="100" />
		<property name="maxIdleTime" value="300" />
		<!-- 当请求失败是否断开和mysql的链接,如果设置成true,当网络通讯断开,会导致c3p0不会再次和数据库链接 -->
		<property name="breakAfterAcquireFailure" value="false" />
		<!-- 当断网时c3p0会每隔3秒尝试和mysql建立网络链接 -->
		<property name="acquireRetryDelay" value="3000" />
		<!-- c3p0每3秒进行一次建立链接，一共尝试无数次 0代表无数次 -->
		<property name="acquireRetryAttempts" value="0" />
	</bean>

	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:hibernate.cfg.xml" />
		
		<!-- Begin Name:wuqiwei Date:2013-09-03 AddReason:使用注释实现ORMaping的映射 -->
		<!-- <property name="configurationClass" value="org.hibernate.cfg.AnnotationConfiguration" 
			/> -->
		<!-- End Name:wuqiwei Date:2013-09-03 AddReason:使用注释实现ORMaping的映射 -->
	</bean>
	<!-- end Spring 通过数据库连接池整合hibernate -->

	<!-- Begin Name:wuqiwei Date:2013-4-21 8:09:27 使用注释进行事务管理器 -->
	<!-- 引入命名空间 xmlns:tx="http://www.springframework.org/schema/tx" 和 xsi:schemaLocation= 
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd 
		注意:@Transactional 只能被应用到public方法上, 对于其它非public的方法,如果标记了@Transactional也不会报错,但方法没有事务功能 
		默认遇到throw new RuntimeException("...");uncheck会回滚,需要捕获的throw new Exception("...") 
		check;不会回滚， 必须将异常往上抛，抛到最外层的action层，此时的事务才会回滚,action一定要重写execute 之后action才可以有事务的支持了。 
		在同一个类中一个方法调用另一个有事务的方法，事务是不会起作用的。 -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!--Begin:Name:wuqiwei Date:2013-4-21 8:09:27使用注释进行hibernateTemplete事务管理 
		这样设置，只要把事务的传播性写在接口那里就好了，子类就无需设置传播性了 -->
	<tx:annotation-driven transaction-manager="transactionManager"
		mode="proxy" proxy-target-class="true" />
	<!-- End Name:wuqiwei Date:2013-4-21 8:09:27 使用注释进行hibernateTemplete事务管理 -->

	<!-- Begin Name:wuqiwei Data:2013-05-02 21:25:36 使用注释进行jdbcTemplete事务管理 -->
	<bean id="jdbcTxManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<tx:annotation-driven transaction-manager="jdbcTxManager"
		mode="proxy" proxy-target-class="true" />
	<!-- Begin Name:wuqiwei Data:2013-05-02 21:25:36 使用注释进行jdbcTemplete事务管理 -->

</beans>